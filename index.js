// === bot.js ===
require('dotenv').config();
const { Telegraf, Markup } = require('telegraf');
const scenarios = require('./scenarios');

const TELEGRAM_BOT_TOKEN = process.env.TELEGRAM_BOT_TOKEN;
if (!TELEGRAM_BOT_TOKEN) {
    console.error('–û—à–∏–±–∫–∞: TELEGRAM_BOT_TOKEN –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è.');
    process.exit(1);
}

const bot = new Telegraf(TELEGRAM_BOT_TOKEN);

// === –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ ===
bot.start((ctx) => {
    ctx.reply('–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', Markup.keyboard([
        ['üìã –ü–æ–º–æ—â—å', 'üë§ –ü—Ä–æ—Ñ–∏–ª—å'],
        ['üìä –ê–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö']
    ]).resize());
});

bot.hears('üìã –ü–æ–º–æ—â—å', scenarios.help);
bot.hears('üë§ –ü—Ä–æ—Ñ–∏–ª—å', scenarios.profile);
bot.hears('üìä –ê–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö', scenarios.analyze);

bot.on('text', scenarios.textHandler);
bot.on(['photo', 'document'], scenarios.fileHandler);

bot.launch();
console.log('–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω —Å –∫–Ω–æ–ø–∫–∞–º–∏!');

process.once('SIGINT', () => bot.stop('SIGINT'));
process.once('SIGTERM', () => bot.stop('SIGTERM'));

// === database.js ===
const sqlite3 = require('sqlite3').verbose();
const { open } = require('sqlite');

const DATABASE_PATH = process.env.DATABASE_PATH || './database.db';

let db;
(async () => {
    db = await open({
        filename: DATABASE_PATH,
        driver: sqlite3.Database
    });

    await db.exec(`
        CREATE TABLE IF NOT EXISTS users (
            id INTEGER PRIMARY KEY,
            telegram_id TEXT UNIQUE,
            username TEXT,
            age INTEGER,
            gender TEXT,
            height REAL,
            weight REAL,
            created_at TEXT DEFAULT CURRENT_TIMESTAMP
        );
    `);
})();

module.exports = {
    getUserByTelegramId: async (telegramId) => {
        return db.get('SELECT * FROM users WHERE telegram_id = ?', [telegramId]);
    },
    createUser: async (telegramId, username) => {
        await db.run('INSERT INTO users (telegram_id, username) VALUES (?, ?)', [telegramId, username]);
    },
    updateUserProfile: async (telegramId, profile) => {
        const { age, gender, height, weight } = profile;
        await db.run(`
            UPDATE users SET
            age = ?,
            gender = ?,
            height = ?,
            weight = ?
            WHERE telegram_id = ?
        `, [age, gender, height, weight, telegramId]);
    },
    getUserProfile: async (telegramId) => {
        return db.get('SELECT age, gender, height, weight FROM users WHERE telegram_id = ?', [telegramId]);
    }
};

// === scenarios.js ===
// –£–¥–∞–ª—ë–Ω –ø–æ–≤—Ç–æ—Ä–Ω—ã–π –∏–º–ø–æ—Ä—Ç 'db'

module.exports = {
    help: (ctx) => {
        ctx.reply(`–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É\n/help - –°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥\n/profile - –ü—Ä–æ—Å–º–æ—Ç—Ä –∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è\n/analyze - –û—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞`);
    },

    profile: async (ctx) => {
        const telegramId = ctx.from.id;
        const profile = await db.getUserProfile(telegramId);

        if (profile) {
            ctx.reply(`–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:\n–í–æ–∑—Ä–∞—Å—Ç: ${profile.age || '–Ω–µ —É–∫–∞–∑–∞–Ω'}\n–ü–æ–ª: ${profile.gender || '–Ω–µ —É–∫–∞–∑–∞–Ω'}\n–†–æ—Å—Ç: ${profile.height || '–Ω–µ —É–∫–∞–∑–∞–Ω'} —Å–º\n–í–µ—Å: ${profile.weight || '–Ω–µ —É–∫–∞–∑–∞–Ω'} –∫–≥\n\n–ß—Ç–æ–±—ã –æ–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∏—Ö –≤ —Ñ–æ—Ä–º–∞—Ç–µ: –≤–æ–∑—Ä–∞—Å—Ç, –ø–æ–ª, —Ä–æ—Å—Ç, –≤–µ—Å.`);
        } else {
            ctx.reply('–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è.');
        }
    },

    analyze: (ctx) => {
        ctx.reply('–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç, –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–ª–∏ PDF –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞.');
    },

    textHandler: async (ctx) => {
        ctx.reply('–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.');
    },

    fileHandler: async (ctx) => {
        ctx.reply('–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–æ–≤ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.');
    }
};

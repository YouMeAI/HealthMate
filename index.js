require('dotenv').config();
const { Telegraf, Markup, session } = require('telegraf');
const scenarios = require('./scenarios');

const TELEGRAM_BOT_TOKEN = process.env.TELEGRAM_BOT_TOKEN;
if (!TELEGRAM_BOT_TOKEN) {
    console.error('–û—à–∏–±–∫–∞: TELEGRAM_BOT_TOKEN –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è.');
    process.exit(1);
}

const bot = new Telegraf(TELEGRAM_BOT_TOKEN);

bot.use(session());

// === –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ ===
bot.start((ctx) => {
    ctx.reply('–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', Markup.keyboard([
        ['üìã –ü–æ–º–æ—â—å', 'üë§ –ü—Ä–æ—Ñ–∏–ª—å'],
        ['üìä –ê–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö', 'üìÇ –ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª—ã'],
        ['üß† –ü—Ä–æ–π—Ç–∏ —Å—Ç—Ä–µ—Å—Å-—Ç–µ—Å—Ç']
    ]).resize());
});

bot.hears('üìã –ü–æ–º–æ—â—å', scenarios.help);
bot.hears('üë§ –ü—Ä–æ—Ñ–∏–ª—å', scenarios.profile);
bot.hears('üìä –ê–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö', scenarios.analyze);
bot.command('upload', scenarios.upload);
bot.command('analyze', scenarios.analyze);
bot.hears('üìÇ –ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª—ã', scenarios.upload);
bot.hears('üß† –ü—Ä–æ–π—Ç–∏ —Å—Ç—Ä–µ—Å—Å-—Ç–µ—Å—Ç', scenarios.stressTest);

bot.on('text', scenarios.textHandler);
bot.on(['photo', 'document'], scenarios.fileHandler);

bot.launch();
console.log('–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω —Å –∫–Ω–æ–ø–∫–∞–º–∏!');

process.once('SIGINT', () => bot.stop('SIGINT'));
process.once('SIGTERM', () => bot.stop('SIGTERM'));

// === database.js ===
const sqlite3 = require('sqlite3').verbose();
const { open } = require('sqlite');

const DATABASE_PATH = process.env.DATABASE_PATH || './database.db';

let db;
(async () => {
    db = await open({
        filename: DATABASE_PATH,
        driver: sqlite3.Database
    });

    await db.exec(`
        CREATE TABLE IF NOT EXISTS users (
            id INTEGER PRIMARY KEY,
            telegram_id TEXT UNIQUE,
            username TEXT,
            age INTEGER,
            gender TEXT,
            height REAL,
            weight REAL,
            created_at TEXT DEFAULT CURRENT_TIMESTAMP
        );

        CREATE TABLE IF NOT EXISTS stress_tests (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id INTEGER,
            telegram_id TEXT,
            question TEXT,
            answer INTEGER,
            created_at TEXT DEFAULT CURRENT_TIMESTAMP,
            FOREIGN KEY (user_id) REFERENCES users (id)
        );
    `);
})();

module.exports = {
    getUserByTelegramId: async (telegramId) => {
        return db.get('SELECT * FROM users WHERE telegram_id = ?', [telegramId]);
    },
    createUser: async (telegramId, username) => {
        await db.run('INSERT INTO users (telegram_id, username) VALUES (?, ?)', [telegramId, username]);
    },
    updateUserProfile: async (telegramId, profile) => {
        const { age, gender, height, weight } = profile;
        await db.run(`
            UPDATE users SET
            age = ?,
            gender = ?,
            height = ?,
            weight = ?
            WHERE telegram_id = ?
        `, [age, gender, height, weight, telegramId]);
    },
    getUserProfile: async (telegramId) => {
        return db.get('SELECT age, gender, height, weight FROM users WHERE telegram_id = ?', [telegramId]);
    },
    saveStressTestResult: async (telegramId, question, answer) => {
        const user = await db.get('SELECT id FROM users WHERE telegram_id = ?', [telegramId]);
        if (user) {
            await db.run(`
                INSERT INTO stress_tests (user_id, telegram_id, question, answer)
                VALUES (?, ?, ?, ?)
            `, [user.id, telegramId, question, answer]);
        }
    },
    getStressTestResults: async (telegramId) => {
        return db.all('SELECT question, answer FROM stress_tests WHERE telegram_id = ?', [telegramId]);
    }
};

// === scenarios.js ===
module.exports = {
    help: (ctx) => {
        ctx.reply('–°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥:\n/help - –ø–æ–º–æ—â—å\n/profile - –ø—Ä–æ—Ñ–∏–ª—å\n/analyze - –∞–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö\n/stresstest - –ø—Ä–æ–π—Ç–∏ —Å—Ç—Ä–µ—Å—Å-—Ç–µ—Å—Ç');
    },

    profile: async (ctx) => {
        const telegramId = ctx.from.id;
        const profile = await db.getUserProfile(telegramId);

        if (profile) {
            ctx.reply(`–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:\n–í–æ–∑—Ä–∞—Å—Ç: ${profile.age || '–Ω–µ —É–∫–∞–∑–∞–Ω'}\n–ü–æ–ª: ${profile.gender || '–Ω–µ —É–∫–∞–∑–∞–Ω'}\n–†–æ—Å—Ç: ${profile.height || '–Ω–µ —É–∫–∞–∑–∞–Ω'} —Å–º\n–í–µ—Å: ${profile.weight || '–Ω–µ —É–∫–∞–∑–∞–Ω'} –∫–≥\n\n–ß—Ç–æ–±—ã –æ–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∏—Ö –≤ —Ñ–æ—Ä–º–∞—Ç–µ: –≤–æ–∑—Ä–∞—Å—Ç, –ø–æ–ª, —Ä–æ—Å—Ç, –≤–µ—Å.`);
        } else {
            ctx.reply('–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è.');
        }
    },

    analyze: (ctx) => {
        ctx.reply('–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç, –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–ª–∏ PDF –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞.');
    },

    stressTest: async (ctx) => {
        const telegramId = ctx.from.id;
        ctx.session.testProgress = 0;
        ctx.session.testResults = [];

        ctx.reply('–ù–∞—á–∏–Ω–∞–µ–º —Å—Ç—Ä–µ—Å—Å-—Ç–µ—Å—Ç PSS-10. –û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã, –≤—ã–±—Ä–∞–≤ –æ—Ç 0 (–Ω–∏–∫–æ–≥–¥–∞) –¥–æ 4 (–æ—á–µ–Ω—å —á–∞—Å—Ç–æ).');
        ctx.reply('–í–æ–ø—Ä–æ—Å 1: –ù–∞—Å–∫–æ–ª—å–∫–æ —á–∞—Å—Ç–æ –≤—ã —á—É–≤—Å—Ç–≤–æ–≤–∞–ª–∏, —á—Ç–æ –º–Ω–æ–≥–æ–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤–Ω–µ –≤–∞—à–µ–≥–æ –∫–æ–Ω—Ç—Ä–æ–ª—è? (0-4)');
    },

    textHandler: async (ctx) => {
        const telegramId = ctx.from.id;
        const { testProgress, testResults } = ctx.session;

        if (testProgress !== undefined && testResults !== undefined) {
            const answer = parseInt(ctx.message.text, 10);

            if (isNaN(answer) || answer < 0 || answer > 4) {
                ctx.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 0 –¥–æ 4.');
                return;
            }

            const questions = [
                '–ù–∞—Å–∫–æ–ª—å–∫–æ —á–∞—Å—Ç–æ –≤—ã —á—É–≤—Å—Ç–≤–æ–≤–∞–ª–∏, —á—Ç–æ –º–Ω–æ–≥–æ–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤–Ω–µ –≤–∞—à–µ–≥–æ –∫–æ–Ω—Ç—Ä–æ–ª—è?',
                '–ö–∞–∫ —á–∞—Å—Ç–æ –≤—ã –∏—Å–ø—ã—Ç—ã–≤–∞–ª–∏ —Ç—Ä—É–¥–Ω–æ—Å—Ç–∏ –≤ —Å–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ —Å –≤–∞–∂–Ω—ã–º–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è–º–∏ –≤ –∂–∏–∑–Ω–∏?',
                '–ù–∞—Å–∫–æ–ª—å–∫–æ —á–∞—Å—Ç–æ –≤—ã —á—É–≤—Å—Ç–≤–æ–≤–∞–ª–∏ —Å–µ–±—è –Ω–µ—Ä–≤–Ω—ã–º –∏–ª–∏ —Å—Ç—Ä–µ—Å—Å–æ–≤–∞–Ω–Ω—ã–º?'
            ];

            testResults.push({ question: questions[testProgress], answer });
            ctx.session.testProgress += 1;

            if (ctx.session.testProgress < questions.length) {
                ctx.reply(`–í–æ–ø—Ä–æ—Å ${ctx.session.testProgress + 1}: ${questions[ctx.session.testProgress]} (0-4)`);
            } else {
                ctx.session.testProgress = undefined;
                ctx.reply('–°–ø–∞—Å–∏–±–æ –∑–∞ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–µ —Ç–µ—Å—Ç–∞! –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.');

                for (const result of testResults) {
                    await db.saveStressTestResult(telegramId, result.question, result.answer);
                }

                const totalScore = testResults.reduce((sum, item) => sum + item.answer, 0);
                let feedback;

                if (totalScore <= 13) {
                    feedback = '–ù–∏–∑–∫–∏–π —É—Ä–æ–≤–µ–Ω—å —Å—Ç—Ä–µ—Å—Å–∞. –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å –±–∞–ª–∞–Ω—Å –≤ –∂–∏–∑–Ω–∏.';
                } else if (totalScore <= 26) {
                    feedback = '–£–º–µ—Ä–µ–Ω–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å —Å—Ç—Ä–µ—Å—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å —Ç–µ—Ö–Ω–∏–∫–∏ —Ä–µ–ª–∞–∫—Å–∞—Ü–∏–∏ –≤ –≤–∞—à—É —Ä—É—Ç–∏–Ω—É.';
                } else {
                    feedback = '–í—ã—Å–æ–∫–∏–π —É—Ä–æ–≤–µ–Ω—å —Å—Ç—Ä–µ—Å—Å–∞. –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –ø—Ä–æ–∫–æ–Ω—Å—É–ª—å—Ç–∏—Ä–æ–≤–∞—Ç—å—Å—è —Å –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª–æ–º.';
                }

                ctx.reply(`–í–∞—à –∏—Ç–æ–≥–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: ${totalScore}\n${feedback}`);
            }
        } else {
            ctx.reply('–í—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ —Ç–µ–∫—Å—Ç.');
        }
    },

    fileHandler: async (ctx) => {
        ctx.reply('–§–∞–π–ª –ø–æ–ª—É—á–µ–Ω.');
    }
};

require('dotenv').config();
const { Telegraf, Markup, session } = require('telegraf');
const scenarios = require('./scenarios');

const TELEGRAM_BOT_TOKEN = process.env.TELEGRAM_BOT_TOKEN;
if (!TELEGRAM_BOT_TOKEN) {
    console.error('–û—à–∏–±–∫–∞: TELEGRAM_BOT_TOKEN –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è.');
    process.exit(1);
}

const bot = new Telegraf(TELEGRAM_BOT_TOKEN);

bot.use(session());

// === –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ ===
bot.start((ctx) => {
    ctx.reply('–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', Markup.keyboard([
        ['üìã –ü–æ–º–æ—â—å', 'üë§ –ü—Ä–æ—Ñ–∏–ª—å'],
        ['üìä –ê–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö', 'üìÇ –ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª—ã']
    ]).resize());
});

bot.hears('üìã –ü–æ–º–æ—â—å', scenarios.help);
bot.hears('üë§ –ü—Ä–æ—Ñ–∏–ª—å', scenarios.profile);
bot.hears('üìä –ê–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö', scenarios.analyze);
bot.command('upload', scenarios.upload);
bot.command('analyze', scenarios.analyze);
bot.hears('üìÇ –ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª—ã', scenarios.upload);

bot.on('text', scenarios.textHandler);
bot.on(['photo', 'document'], scenarios.fileHandler);

bot.launch();
console.log('–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω —Å –∫–Ω–æ–ø–∫–∞–º–∏!');

process.once('SIGINT', () => bot.stop('SIGINT'));
process.once('SIGTERM', () => bot.stop('SIGTERM'));

// === database.js ===
const sqlite3 = require('sqlite3').verbose();
const { open } = require('sqlite');

const DATABASE_PATH = process.env.DATABASE_PATH || './database.db';

let db;
(async () => {
    db = await open({
        filename: DATABASE_PATH,
        driver: sqlite3.Database
    });

    await db.exec(`
        CREATE TABLE IF NOT EXISTS users (
            id INTEGER PRIMARY KEY,
            telegram_id TEXT UNIQUE,
            username TEXT,
            age INTEGER,
            gender TEXT,
            height REAL,
            weight REAL,
            created_at TEXT DEFAULT CURRENT_TIMESTAMP
        );

        CREATE TABLE IF NOT EXISTS files (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id INTEGER,
            telegram_id TEXT,
            file_id TEXT,
            file_name TEXT,
            file_type TEXT,
            file_content TEXT,
            analysis_data TEXT,
            uploaded_at TEXT DEFAULT CURRENT_TIMESTAMP,
            FOREIGN KEY (user_id) REFERENCES users (id)
        );
    `);
})();

module.exports = {
    getUserByTelegramId: async (telegramId) => {
        return db.get('SELECT * FROM users WHERE telegram_id = ?', [telegramId]);
    },
    createUser: async (telegramId, username) => {
        await db.run('INSERT INTO users (telegram_id, username) VALUES (?, ?)', [telegramId, username]);
    },
    updateUserProfile: async (telegramId, profile) => {
        const { age, gender, height, weight } = profile;
        await db.run(`
            UPDATE users SET
            age = ?,
            gender = ?,
            height = ?,
            weight = ?
            WHERE telegram_id = ?
        `, [age, gender, height, weight, telegramId]);
    },
    getUserProfile: async (telegramId) => {
        return db.get('SELECT age, gender, height, weight FROM users WHERE telegram_id = ?', [telegramId]);
    },
    saveFile: async (fileData) => {
        const { user_id, telegram_id, file_id, file_name, file_type, file_content, analysis_data } = fileData;
        await db.run(`
            INSERT INTO files (user_id, telegram_id, file_id, file_name, file_type, file_content, analysis_data)
            VALUES (?, ?, ?, ?, ?, ?, ?)
        `, [user_id, telegram_id, file_id, file_name, file_type, file_content, analysis_data]);
    },
    getUserFilesByTelegramId: async (telegramId) => {
        return db.all('SELECT * FROM files WHERE telegram_id = ?', [telegramId]);
    },
};

// === scenarios.js ===
module.exports = {
    help: (ctx) => {
        ctx.reply('–°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥:\n/help - –ø–æ–º–æ—â—å\n/profile - –ø—Ä–æ—Ñ–∏–ª—å\n/analyze - –∞–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö\n/upload - –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª—ã.');
    },

    profile: async (ctx) => {
        const telegramId = ctx.from.id;
        const profile = await db.getUserByTelegramId(telegramId);

        if (profile) {
            ctx.reply(`–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:\n–í–æ–∑—Ä–∞—Å—Ç: ${profile.age || '–Ω–µ —É–∫–∞–∑–∞–Ω'}\n–ü–æ–ª: ${profile.gender || '–Ω–µ —É–∫–∞–∑–∞–Ω'}\n–†–æ—Å—Ç: ${profile.height || '–Ω–µ —É–∫–∞–∑–∞–Ω'} —Å–º\n–í–µ—Å: ${profile.weight || '–Ω–µ —É–∫–∞–∑–∞–Ω'} –∫–≥\n\n–ß—Ç–æ–±—ã –æ–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∏—Ö –≤ —Ñ–æ—Ä–º–∞—Ç–µ: –≤–æ–∑—Ä–∞—Å—Ç, –ø–æ–ª, —Ä–æ—Å—Ç, –≤–µ—Å.`);
        } else {
            ctx.reply('–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è.');
        }
    },

    analyze: async (ctx) => {
        const telegramId = ctx.from.id;
        try {
            const userData = await db.getUserByTelegramId(telegramId);

            if (!userData) {
                ctx.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–æ–∑–¥–∞–π—Ç–µ –ø—Ä–æ—Ñ–∏–ª—å —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /profile –ø–µ—Ä–µ–¥ –∞–Ω–∞–ª–∏–∑–æ–º –¥–∞–Ω–Ω—ã—Ö.');
                return;
            }

            const userFiles = await db.getUserFilesByTelegramId(telegramId);

            if (!userFiles || userFiles.length === 0) {
                ctx.reply('–£ –≤–∞—Å –Ω–µ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /upload, —á—Ç–æ–±—ã –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ.');
                return;
            }

            ctx.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ. –í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –∞–Ω–∞–ª–∏–∑–∏—Ä—É—é—Ç—Å—è...');

            const analysisText = `–ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:\n–í–æ–∑—Ä–∞—Å—Ç: ${userData.age || '–Ω–µ —É–∫–∞–∑–∞–Ω'}\n–ü–æ–ª: ${userData.gender || '–Ω–µ —É–∫–∞–∑–∞–Ω'}\n–†–æ—Å—Ç: ${userData.height || '–Ω–µ —É–∫–∞–∑–∞–Ω'} —Å–º\n–í–µ—Å: ${userData.weight || '–Ω–µ —É–∫–∞–∑–∞–Ω'} –∫–≥\n`;

            const report = await gpt4.generateReport({ userData, userFiles });

            if (report.error) {
                ctx.reply(`–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≤–µ—Ä—à–∏—Ç—å –∞–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö. –ü—Ä–∏—á–∏–Ω–∞: ${report.message}`);
                return;
            }

            ctx.reply(`–ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à—ë–Ω. –í–∞—à –æ—Ç—á—ë—Ç:\n\n${report.text}`);

        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –¥–∞–Ω–Ω—ã—Ö:', error);
            ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
        }
    },

    upload: async (ctx) => {
        ctx.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Å–≤–æ–∏ —Ñ–∞–π–ª—ã –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞.');
    },

    textHandler: async (ctx) => {
        ctx.reply('–í—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ —Ç–µ–∫—Å—Ç.');
    },

    fileHandler: async (ctx) => {
        ctx.reply('–§–∞–π–ª –ø–æ–ª—É—á–µ–Ω.');
    }
};
